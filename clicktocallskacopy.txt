<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Click to Calls</title>
    <link rel="icon" href="data:;base64,iVBORw0KGgo=">
    <style>
        :root {
            --primary-color: #000000;
            --secondary-color: #ffffff;
            --accent-color: #808080;
            --shadow-color: rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #f5f5f5;
            color: #333;
            line-height: 1.6;
        }

        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: var(--primary-color);
            color: var(--secondary-color);
            padding: 0.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            z-index: 1000;
            box-shadow: 0 2px 5px var(--shadow-color);
        }

        .header h1 {
            font-size: 1.2rem;
        }

        .header-count {
            font-size: 1rem;
            font-weight: 600;
            color: var(--secondary-color);
            background: rgba(255,255,255,0.1);
            padding: 4px 12px;
            border-radius: 15px;
        }

        .back-btn {
            background: none;
            border: none;
            color: var(--secondary-color);
            font-size: 1rem;
            cursor: pointer;
            padding: 5px 10px;
            transition: transform 0.2s ease;
        }

        .back-btn:hover {
            transform: translateX(-3px);
        }

        .call-list {
            margin-top: 70px;
            padding-bottom: 20px;
        }

        .call-item {
            background: var(--secondary-color);
            border-radius: 12px;
            margin: 10px 0;
            padding: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 2px 5px var(--shadow-color);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
            animation: fadeIn 0.3s ease;
        }

        .call-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px var(--shadow-color);
        }

        .number-info {
            flex: 1;
            display: flex !important;
        flex-direction:column !important;
        align-items: flex-start !important;
       
        }

        .phone-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #333;
            margin-right: 5px;
        }

        .call-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            border-radius: 25px;
            padding: 10px 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .call-btn:hover {
            background: #333;
            transform: scale(1.05);
        }

        .call-btn:active {
            transform: scale(0.95);
        }

        .call-icon {
            width: 16px;
            height: 16px;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .search-bar {
            position: fixed;
            top: 60px;
            left: 0;
            right: 0;
            padding: 10px 20px;
            background: #fff;
            z-index: 999;
            box-shadow: 0 2px 5px var(--shadow-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
        }

        .search-input {
            width: 250px;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 25px;
            font-size: 1rem;
            outline: none;
            transition: border-color 0.2s ease;
        }

        .search-input:focus {
            border-color: var(--primary-color);
        }

        .activity-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            border-radius: 25px;
            padding: 10px 20px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .activity-btn:hover {
            background: #333;
        }

        .activity-dropdown {
            position: absolute;
            top: 100%;
            right: 20px;
            background: var(--secondary-color);
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 10px 0;
            margin-top: 5px;
            display: none;
            z-index: 1000;
            min-width: 200px;
        }

        .activity-dropdown.show {
            display: block;
            animation: fadeIn 0.2s ease;
        }

        .activity-option {
            padding: 12px 20px;
            color: #333;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .activity-option:hover {
            background-color: #f5f5f5;
        }

        .activity-count {
            color: #666;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .call-list {
            margin-top: 120px;
            background: var(--secondary-color);
            border-radius: 12px;
            box-shadow: 0 2px 5px var(--shadow-color);
            padding: 15px;
        }

        .number-row {
            padding: 15px 10px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 2px solid #e0e0e0;
            transition: background-color 0.2s ease;
        }

        .number-row:last-child {
            border-bottom: none;
        }

        .number-row:hover {
            background-color: #f8f8f8;
        }

        .serial-number {
            font-size: 1.2rem;
            font-weight: 500;
            color: #666;
            margin-right: 1px;
            min-width: 30px;
            text-align: right;
        }

        .number-info {
            flex: 1;
        }

        .call-btn {
            background: var(--primary-color);
            color: var(--secondary-color);
            border: none;
            border-radius: 25px;
            padding: 10px 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        @media (max-width: 480px) {
            .container {
                padding: 10px;
            }

            .call-item {
                padding: 12px;
            }

            .phone-number {
                font-size: 1.4rem;
            }

            .call-btn {
                padding: 8px 15px;
                font-size: 1rem;
            }

            .search-input {
                width: 53%;
            }
        }

        /* Loading animation */
        .loading-skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: loading 1.5s infinite;
            border-radius: 12px;
            height: 60px;
            margin: 10px 0;
        }

        @keyframes loading {
            0% {
                background-position: 200% 0;
            }
            100% {
                background-position: -200% 0;
            }
        }

        /* Popup styles */
        .popup-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(5px);
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .popup-card {
            background-color: var(--secondary-color);
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 400px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            color: var(--primary-color);
            text-align: center;
        }

        .popup-title {
            font-size: 24px;
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .popup-buttons {
            display: flex;
            justify-content: space-around;
            margin-top: 25px;
        }

        .popup-button {
            padding: 10px 20px;
            border: none;
            border-radius: 25px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .yes-button {
            background-color: #4CAF50;
            color: white;
        }

        .no-button {
            background-color: #f44336;
            color: white;
        }

        .popup-card-2 {
            background-color: var(--secondary-color);
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            padding: 30px;
            text-align: center;
            max-width: 300px;
            width: 90%;
            animation: popIn 0.3s ease-out;
        }

        .popup-buttons-2 {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .popup-button-2 {
            padding: 12px 24px;
            border: none;
            border-radius: 30px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .not-interested-button {
            background-color: #f44336;
            color: white;
        }

        .interested-button {
            background-color: #4CAF50;
            color: white;
        }

        .callback-button {
            background-color: #2196F3;
            color: white;
        }

        /* New CSS for status label */
        .status-label {
            background: var(--primary-color);
            color: var(--secondary-color);
            padding: 5px 15px;
            border-radius: 15px;
            font-size: 0.9rem;
            font-weight: 600;
            text-transform: capitalize;
        }

        /* Smooth animations */
        .call-item {
            transition: opacity 0.3s ease, transform 0.3s ease;
        }
        
        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid #f3f3f3;
            border-top: 3px solid #3498db;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .call-datetime {
            font-size: 0.8rem;
            color: #666;
            margin-top: 4px;
        }

        .status-label {
            font-size: 0.8rem;
            padding: 2px 8px;
            border-radius: 12px;
            background: #f0f0f0;
            color: #666;
            margin-left: 10px;
        }

        @keyframes slideOutRight {
            0% {
                transform: translateX(0);
                opacity: 1;
            }
            100% {
                transform: translateX(100%);
                opacity: 0;
            }
        }

        @keyframes slideOutLeft {
            0% {
                transform: translateX(0);
                opacity: 1;
            }
            100% {
                transform: translateX(-100%);
                opacity: 0;
            }
        }

        .slide-out-right {
            animation: slideOutRight 0.5s ease forwards;
        }

        .slide-out-left {
            animation: slideOutLeft 0.5s ease forwards;
        }

        .call-item {
            transition: all 0.5s ease;
            transform-origin: center;
        }

        .call-item.removing {
            animation: removeItem 0.5s ease forwards;
        }

        @keyframes removeItem {
            0% {
                transform: scale(1) translateX(0);
                opacity: 1;
            }
            50% {
                transform: scale(0.9) translateX(-30px);
                opacity: 0.5;
            }
            100% {
                transform: scale(0.8) translateX(-100%);
                opacity: 0;
            }
        }

        /* First ensure the animation CSS is consistent everywhere */
        @keyframes crushIntoBall {
            0% {
                transform: scale(1) rotate(0deg);
                border-radius: 0%;
                opacity: 1;
            }
            50% {
                transform: scale(0.6) rotate(-10deg);
                border-radius: 30%;
                opacity: 0.7;
            }
            100% {
                transform: scale(0) rotate(-20deg);
                border-radius: 50%;
                opacity: 0;
            }
        }

        .call-item.ball-crush {
            animation: crushIntoBall 0.4s ease-in forwards;
            background: white;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .button-group {
            display: flex;
            gap: 7px;
            align-items: center;
            position: relative;
        }
        .icon-only {
            padding: 0 !important;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .call-icon {
            width: 20px;
            height: 20px;
        }
        .whatsapp-btn {
            background: #25D366;
            color: white;
            border: none;
            border-radius: 50%;
            width: 45px;
            height: 45px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            padding: 12px;
        }
        .whatsapp-icon {
            width: 100%;
            height: 100%;
            fill: white;
        }
        .whatsapp-status {
            position: absolute;
            right: -15px;
            top: 50%;
            transform: translateY(-50%);
            background: white;
            border-radius: 50%;
            padding: 2px;
        }
        .tick-icon {
            width: 24px;
            height: 24px;
            fill: #8696a0;
        }
        .tick-icon.read {
            fill: #000000;
        }
        
        .call-item {
            padding-right: 20px;  /* Add some padding to accommodate ticks */
        }

        /* Only for activity view */
        .activity-view .number-info {
            display: flex !important;
            flex-direction: column !important;
            align-items: flex-start !important;
        }

        .activity-view .phone-number {
            display: block !important;
            width: 100% !important;
        }

        .activity-view .call-datetime {
            display: block !important;
            width: 100% !important;
            margin-top: 4px !important;
        }
        
        /* Only change button text for unanswered calls */
        .activity-view .call-btn::after {
            content: 'Call';
            margin-left: 5px;  /* Add space between icon and text */
        }
        
        .unanswered-view .call-icon::after {
            content: 'Call Again' !important;
            margin-left: 5px;  /* Add space between icon and text */
        }

        /* Make sure text is visible */
        .call-icon {
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
        }

        /* Only add text for unanswered calls button */
        .call-btn {
            display: flex !important;
            align-items: center !important;
        }

        .call-icon::after {
            content: '';
            margin-left: 5px;
        }

        .unanswered-view .call-icon::after {
            content: 'Call Again' !important;
        }
    </style>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database-compat.js"></script>
</head>
<body onload="initializeClickToCall()">
    <div class="header">
        <button class="back-btn" onclick="window.close()" style="border: 2px solid white; border-radius: 8px;">←Back</button>
        <h1> <span class="header-count" id="headerCount">0</span> </h1>
        <div style="width: 40px"></div>
    </div>

    <div class="search-bar">
        <input type="text" class="search-input" placeholder="Search phone number..." id="searchInput">
        <button class="activity-btn" id="activityBtn">
            My Activity
        </button>
        <div class="activity-dropdown" id="activityDropdown">
            <div class="activity-option" onclick="location.reload()">
                <span>Back To Calling List</span>
            </div>
            <div class="activity-option" onclick="showActivity('unanswered')">
                <span>Unanswered Calls</span>
                <span class="activity-count" id="unansweredCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('callback')">
                <span>Callback Calls</span>
                <span class="activity-count" id="callbackCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('interested')">
                <span>Interested Calls</span>
                <span class="activity-count" id="interestedCount">(0)</span>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="call-list" id="callList">
            <!-- Call items will be dynamically added here -->
        </div>
    </div>

    <div id="callAnsweredPopup" class="popup-overlay">
        <div class="popup-card">
            <div class="popup-title">Was The Call Answered?</div>
            <div class="popup-buttons">
                <button class="popup-button yes-button" onclick="handleCallAnswer(true)">YES</button>
                <button class="popup-button no-button" onclick="handleCallAnswer(false)">NO</button>
            </div>
        </div>
    </div>

    <div id="callStatusPopup" class="popup-overlay">
        <div class="popup-card-2">
            <div class="popup-title">Call Status</div>
            <div class="popup-buttons-2">
                <button class="popup-button-2 interested-button" onclick="handleCallStatus('interested')">Interested</button>
                <button class="popup-button-2 callback-button" onclick="handleCallStatus('callback')">Callback</button>
            </div>
        </div>
    </div>

    <script>
        // Firebase configuration
        const firebaseConfig = {
            apiKey: "AIzaSyCLrrkbXcW-exG8_n4kOEmzA-SETMWqo-0",
            authDomain: "feedbackapp-5904d.firebaseapp.com",
            databaseURL: "https://feedbackapp-5904d-default-rtdb.firebaseio.com",
            projectId: "feedbackapp-5904d",
            storageBucket: "feedbackapp-5904d.firebasestorage.app",
            messagingSenderId: "620175464767",
            appId: "1:620175464767:web:8054286a27a26210619b8a",
            measurementId: "G-QH8JN7TE0J"
        };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);

        let currentNumber = null;
        let currentSerialNumber = null;
        let callStartTime = null;

        // Initialize Firebase and setup real-time listener
        let realtimeListener = null; // To store reference to listener

        // Add real-time listeners for activity counts
        let activityListeners = {};

        async function initializeClickToCall() {
            try {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                console.log('1. Starting initialization with telecaller ID:', telecallerId);

                // Setup real-time listener for uploaddata
                const dbRef = firebase.database().ref(`Click to calls/telecaller${telecallerId}/uploaddata`);
                
                // Remove any existing listener first
                if (realtimeListener) {
                    dbRef.off('value', realtimeListener);
                }

                // Setup new listener
                realtimeListener = dbRef.on('value', async (snapshot) => {
                    console.log('2. Received real-time update from Firebase');
                    const data = snapshot.val();
                    
                    if (data) {
                        // Convert to ordered array maintaining sequence
                        const numbers = Object.entries(data)
                            .sort((a, b) => parseInt(a[0]) - parseInt(b[0]))
                            .map(([index, number]) => ({
                                number,
                                serialNumber: parseInt(index) + 1,
                                source: 'clicktocall' // Add source identifier
                            }));

                            console.log('3. Processed numbers:', numbers);
                            
                            // Update UI smoothly
                            await displayNumbers(numbers);
                            updateCounts(); // This will now filter by source
                    } else {
                        console.log('No numbers available');
                        const callList = document.getElementById('callList');
                        callList.innerHTML = '<div class="call-item">No numbers available. Please upload numbers first.</div>';
                    }
                }, (error) => {
                    console.error('Firebase listener error:', error);
                });

            } catch (error) {
                console.error('Initialization error:', error);
            }
        }

        // Modify displayNumbers for smoother updates
        async function displayNumbers(numbers) {
            const callListHtml = numbers.map(item => `
                <div class="call-item" data-number="${item.number}">
                    <div class="number-info">
                        <div class="phone-number">${item.number}</div>
                    </div>
                    <button class="call-btn" onclick="initiateCall('${item.number}', ${item.serialNumber})">
                        <svg class="call-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                            <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
                        </svg>
                        Call
                    </button>
                </div>
            `).join('');
            
            document.getElementById('callList').innerHTML = callListHtml;
            
            // Update header count with text
            document.getElementById('headerCount').textContent = `${numbers.length} Numbers Left`;
        }

        // Standard data structure for ALL call outcomes
        const createStandardCallData = (number, serialNumber, status) => {
            const now = new Date();
            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const year = now.getFullYear().toString().slice(-2);
            const hours = now.getHours() % 12 || 12;
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const ampm = now.getHours() >= 12 ? 'PM' : 'AM';
            
            return {
                dateTime: `${day}/${month}/${year} ${hours}:${minutes} ${ampm}`,
                duration: "00:04",
                notes: status,
                serialNumber: serialNumber,
                status: status
            };
        };

        // Handle initial call answer
        function handleCallAnswer(answered) {
            try {
                document.getElementById('callAnsweredPopup').style.display = 'none';
                
                if (answered) {
                    // If "Yes" clicked, show status options (Interested/Callback)
                    document.getElementById('callStatusPopup').style.display = 'flex';
                } else {
                    // If "No" clicked, handle as not-lift
                    handleCallStatus('unanswered');
                }
            } catch (error) {
                console.error('Error in handleCallAnswer:', error);
            }
        }

        // Handle final status selection (used for all statuses)
        async function handleCallStatus(status) {
            try {
                // Hide popups
                document.getElementById('callStatusPopup').style.display = 'none';
                document.getElementById('callAnsweredPopup').style.display = 'none';
                
                const formattedStatus = status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();
                const telecallerEmail = localStorage.getItem('telecallerEmail');
                const telecallerName = telecallerEmail.split('@')[0];
                const db = firebase.database();

                console.log('========== CALL STATUS UPDATE PROCESS ==========');
                console.log('1. Processing call for number:', currentNumber);
                console.log('2. New status to be applied:', formattedStatus);

                // First: Check and Delete from main telecaller data
                console.log('3. Checking for existing entries in telecaller data...');
                const existingRef = db.ref(telecallerName);
                const snapshot = await existingRef.orderByChild('number').equalTo(currentNumber).once('value');
                
                if (snapshot.exists()) {
                    console.log('4. FOUND existing entry in telecaller data:');
                    snapshot.forEach((childSnapshot) => {
                        const existingData = childSnapshot.val();
                        console.log('   - Old Data:', {
                            key: childSnapshot.key,
                            status: existingData.status,
                            dateTime: existingData.dateTime
                        });
                        console.log('5. Deleting existing entry with key:', childSnapshot.key);
                        existingRef.child(childSnapshot.key).remove();
                        return true;
                    });
                } else {
                    console.log('4. No existing entries found in telecaller data');
                }

                // Prepare new data
                const callData = {
                    number: currentNumber,
                    status: formattedStatus,
                    dateTime: getCurrentDateTime(),
                    duration: status === 'Unanswered' ? 
                        '<img src="images/missed-calls.png" width="17" height="17" alt="Missed Call"> Missed' :
                        '<img src="images/outgoing-calls.png" width="17" height="17" alt="Outgoing Call"> Outgoing',
                    timestamp: firebase.database.ServerValue.TIMESTAMP,
                    telecallerEmail: telecallerEmail,
                    source: "clicktocall"
                };

                // Save new data
                console.log('6. Saving new call data:', callData);
                const newRef = await db.ref(telecallerName).push(callData);
                console.log('7. New data saved successfully with key:', newRef.key);

                // Second: Check and Delete from Click to calls/uploaddata
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const uploaddataRef = db.ref(`Click to calls/telecaller${telecallerId}/uploaddata`);
                
                console.log('8. Checking Click to calls/uploaddata for number...');
                const uploadSnapshot = await uploaddataRef.once('value');
                let uploadDataDeleted = false;
                
                uploadSnapshot.forEach((childSnapshot) => {
                    if (childSnapshot.val() === currentNumber) {
                        console.log('9. Found number in uploaddata at index:', childSnapshot.key);
                        uploaddataRef.child(childSnapshot.key).remove();
                        uploadDataDeleted = true;
                        console.log('10. Successfully deleted from uploaddata');
                        return true;
                    }
                });

                if (!uploadDataDeleted) {
                    console.log('9. Number not found in uploaddata (might be from Activity view)');
                }

                // Update UI
                console.log('11. Updating UI...');
                const callItem = document.querySelector(`[data-number="${currentNumber}"]`);
                if (callItem) {
                    callItem.classList.add('ball-crush');
                    setTimeout(() => callItem.remove(), 400);
                    console.log('12. UI updated - removed call item with animation');
                }

                // Update counts
                await updateCounts();
                console.log('13. Activity counts updated');
                console.log('========== PROCESS COMPLETED ==========\n');

            } catch (error) {
                console.error('ERROR in handleCallStatus:', error);
                console.error('Full error details:', {
                    message: error.message,
                    code: error.code,
                    stack: error.stack
                });
                alert('Failed to update call status');
            }
        }

        // Search functionality
        document.getElementById('searchInput')?.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const items = document.getElementsByClassName('call-item');
            
            Array.from(items).forEach(item => {
                const number = item.querySelector('.phone-number').textContent;
                if (number.toLowerCase().includes(searchTerm)) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });
        });

        // Update the header to show telecaller ID
        function updateHeader() {
            const telecallerId = localStorage.getItem('currentTelecallerId');
            const headerTitle = document.querySelector('.header h1');
            headerTitle.textContent = `Telecaller ${telecallerId} - Click To Call`;
        }

        // Update the back button to return to index.html
        document.querySelector('.back-btn').onclick = () => {
            localStorage.removeItem('telecallerId'); // Clear stored ID
            window.location.href = 'index.html';
        };

        // Function to format phone number
        function formatPhoneNumber(number) {
            return number;
        }

        // Function to create call item
        function createNumberRow(item) {
            const row = document.createElement('div');
            row.className = 'number-row';
            row.innerHTML = `
                <div class="number-info">
                    <span class="serial-number">${item.serialNumber}.</span>
                    <div class="phone-number">${formatPhoneNumber(item.number)}</div>
                </div>
                <button class="call-btn" onclick="initiateCall('${item.number}', ${item.serialNumber})">
                    <svg class="call-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
                    </svg>
                    Call
                </button>
            `;
            return row;
        }

        // Add Firebase configuration and initialization
        // Store calls in localStorage
        const STORAGE_KEYS = {
            ALL_CALLS: 'allCalls',
            UNANSWERED: 'unansweredCalls',
            NOT_INTERESTED: 'notInterestedCalls',
            CALLBACK: 'callbackCalls',
            INTERESTED: 'interestedCalls'
        };

        // Initialize storage if not exists
        if (!localStorage.getItem(STORAGE_KEYS.ALL_CALLS)) {
            localStorage.setItem(STORAGE_KEYS.ALL_CALLS, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.UNANSWERED, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.NOT_INTERESTED, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.CALLBACK, JSON.stringify([]));
            localStorage.setItem(STORAGE_KEYS.INTERESTED, JSON.stringify([]));
        }

        // Update the activity dropdown HTML
        document.querySelector('.activity-dropdown').innerHTML = `
            <div class="activity-option" onclick="location.reload()">
                <span>Back To Calling</span>
            </div>
            <div class="activity-option" onclick="showActivity('unanswered')">
                <span>Unanswered Calls</span>
                <span class="activity-count" id="unansweredCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('callback')">
                <span>Callback Calls</span>
                <span class="activity-count" id="callbackCount">(0)</span>
            </div>
            <div class="activity-option" onclick="showActivity('interested')">
                <span>Interested Calls</span>
                <span class="activity-count" id="interestedCount">(0)</span>
            </div>
        `;

        // Update initiateCall to handle transitions
        function initiateCall(number, key) {
            try {
                if (!number || !key) {
                    console.error('Invalid parameters in initiateCall:', { number, key });
                    return;
                }
                
                currentNumber = number;
                currentSerialNumber = key;
                
                // Update timestamp only in current category
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const now = new Date();
                const timestamp = now.toLocaleString('en-IN', {
                    day: '2-digit',
                    month: '2-digit',
                    year: '2-digit',
                    hour: 'numeric',
                    minute: '2-digit',
                    hour12: true
                });

                // Show popup and initiate call
                document.getElementById('callAnsweredPopup').style.display = 'flex';
                setTimeout(() => {
                    window.location.href = `tel:${number}`;
                }, 1000);
                
            } catch (error) {
                console.error('Error in initiateCall:', error);
                alert('Error initiating call. Please try again.');
            }
        }

        // Update the updateCounts function to use the new path
        async function updateCounts() {
            try {
                const telecallerEmail = localStorage.getItem('telecallerEmail');
                const telecallerName = telecallerEmail.split('@')[0];
                const db = firebase.database();

                // Get reference to telecaller's node
                const telecallerRef = db.ref(telecallerName);
                
                // Get status-specific counts independently
                const [unansweredCalls, interestedCalls, callbackCalls] = await Promise.all([
                    telecallerRef.orderByChild('status').equalTo('Unanswered').once('value'),
                    telecallerRef.orderByChild('status').equalTo('Interested').once('value'),
                    telecallerRef.orderByChild('status').equalTo('Callback').once('value')
                ]);

                // Filter counts to only include clicktocall source
                const filterClickToCall = (snapshot) => {
                    let count = 0;
                    snapshot.forEach(child => {
                        if (child.val().source === 'clicktocall') count++;
                    });
                    return count;
                };

                // Update counts in UI independently
                document.getElementById('unansweredCount').textContent = 
                    `(${filterClickToCall(unansweredCalls)})`;
                document.getElementById('interestedCount').textContent = 
                    `(${filterClickToCall(interestedCalls)})`;
                document.getElementById('callbackCount').textContent = 
                    `(${filterClickToCall(callbackCalls)})`;

            } catch (error) {
                console.error('Error updating counts:', error);
            }
        }

        // Activity dropdown functionality
        const activityBtn = document.getElementById('activityBtn');
        const activityDropdown = document.getElementById('activityDropdown');

        activityBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            activityDropdown.classList.toggle('show');
        });

        document.addEventListener('click', (e) => {
            if (!activityDropdown.contains(e.target) && !activityBtn.contains(e.target)) {
                activityDropdown.classList.remove('show');
            }
        });

        // Clean up listener when page is closed/navigated away
        window.addEventListener('beforeunload', () => {
            if (realtimeListener) {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                const dbRef = firebase.database().ref(`Click to calls/telecaller${telecallerId}/uploaddata`);
                dbRef.off('value', realtimeListener);
            }
        });

        // Add this helper function to validate the Firebase connection
        function checkFirebaseConnection() {
            const connectedRef = firebase.database().ref(".info/connected");
            connectedRef.on("value", (snap) => {
                if (snap.val() === true) {
                    console.log("Connected to Firebase");
                } else {
                    console.log("Not connected to Firebase");
                }
            });
        }

        // Call this when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            checkFirebaseConnection();
        });

        // First, let's modify where the call data is initially saved
        async function saveCallData(number, duration) {
            try {
                const telecallerId = localStorage.getItem('currentTelecallerId');
                
                // Store this data temporarily instead of saving to Firebase
                window.tempCallData = {
                    number: number,
                    dateTime: new Date().toLocaleString('en-IN', {
                        day: '2-digit',
                        month: '2-digit',
                        year: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    }),
                    duration: '<img src="images/outgoing-calls.png" width="17" height="17" alt="Outgoing Call"> Outgoing'
                };

                console.log('Stored temporary call data:', window.tempCallData);
                
                // Show status popup here
                showStatusPopup(number);

            } catch (error) {
                console.error('Error storing call data:', error);
            }
        }

        // Then update the status click handler
        async function handleStatusClick(number, status) {
            try {
                const telecallerEmail = localStorage.getItem('telecallerEmail');
                const telecallerName = telecallerEmail.split('@')[0];
                
                const tempData = window.tempCallData || {};
                
                // Use the same date/time format
                const now = new Date();
                const day = String(now.getDate()).padStart(2, '0');
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const year = now.getFullYear().toString().slice(-2);
                const time = now.toLocaleTimeString('en-US', { 
                    hour: 'numeric',    // Single digit hour (1-12)
                    minute: '2-digit',  // Two digit minutes
                    hour12: true        // 12-hour format with AM/PM
                });
                
                const indianDateTime = `${day}/${month}/${year} ${time}`;

                const finalCallData = {
                    number: number,
                    dateTime: tempData.dateTime || indianDateTime,
                    duration: '<img src="images/outgoing-calls.png" width="17" height="17" alt="Outgoing Call"> Outgoing',
                    notes: status,
                    status: status,
                    telecallerEmail: telecallerEmail,
                    source: "clicktocall"  // Add source field
                };

                // Save directly under telecaller name node (remove "Click to calls" path)
                await firebase.database()
                    .ref(telecallerName)  // Save under telecaller name
                    .push(finalCallData);  // Use push to create a unique ID
                
                window.tempCallData = null;
                closeStatusPopup();
                showActivity('uploaddata');

            } catch (error) {
                console.error('Error in handleStatusClick:', error);
                alert('Failed to update call status');
            }
        }

        // Update the call completion handler
        function handleCallCompletion(number, callDuration) {
            console.log('Call completed:', { number, callDuration });
            saveCallData(number, callDuration);
        }

        function getCurrentDateTime() {
            const now = new Date();
            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const year = now.getFullYear().toString().slice(-2);
            const hours = now.getHours() % 12 || 12;
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const ampm = now.getHours() >= 12 ? 'pm' : 'am';
            return `${day}/${month}/${year} ${hours}:${minutes}${ampm}`;
        }

        async function showActivity(status) {
            try {
                const telecallerEmail = localStorage.getItem('telecallerEmail');
                const telecallerName = telecallerEmail.split('@')[0];
                const db = firebase.database();
                const callList = document.getElementById('callList');

                document.getElementById('activityDropdown').classList.remove('show');
                callList.innerHTML = '<div class="spinner"></div>';

                let query;
                if (status === 'all') {
                    query = db.ref(telecallerName);
                } else {
                    const formattedStatus = status.charAt(0).toUpperCase() + status.slice(1).toLowerCase();
                    query = db.ref(telecallerName).orderByChild('status').equalTo(formattedStatus);
                }

                const snapshot = await query.once('value');
                const calls = snapshot.val();

                if (!calls) {
                    callList.innerHTML = `<div class="call-item">No ${status} calls found.</div>`;
                    return;
                }

                const callsArray = Object.entries(calls)
                    .map(([key, call]) => ({
                        ...call,
                        key,
                        // Create a sortDate property for accurate sorting
                        sortDate: convertToDateTime(call.dateTime)
                    }))
                    .sort((a, b) => {
                        // Sort by timestamp if available, otherwise use converted date
                        if (a.timestamp && b.timestamp) {
                            return b.timestamp - a.timestamp;
                        }
                        return b.sortDate - a.sortDate;
                    });

                const callListHtml = callsArray.map(call => `
                    <div class="call-item" data-number="${call.number}">
                        <div class="number-info">
                            <div style="text-align: left; margin-bottom: 5px;">
                                <span style="background: black; padding: 4px 7px; border-radius: 15px; font-size: 10px; color: white; font-weight: bold;">
                                    <span style="display: inline-block; width: 8px; height: 8px; background: red; border-radius: 50%; margin-right: 2px;"></span>
                                    ${call.source || 'Click to Call'}
                                </span>
                            </div>
                            <div class="phone-number">${maskPhoneNumber(call.number, call.status, true)}</div>
                            <div class="call-datetime">${call.dateTime || ''}</div>
                        </div>
                        <div class="button-group">
                            <button class="call-btn icon-only" onclick="initiateCall('${call.number}', '${call.key}')">
                                <svg class="call-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M22 16.92v3a2 2 0 01-2.18 2 19.79 19.79 0 01-8.63-3.07 19.5 19.5 0 01-6-6 19.79 19.79 0 01-3.07-8.67A2 2 0 014.11 2h3a2 2 0 012 1.72 12.84 12.84 0 00.7 2.81 2 2 0 01-.45 2.11L8.09 9.91a16 16 0 006 6l1.27-1.27a2 2 0 012.11-.45 12.84 12.84 0 002.81.7A2 2 0 0122 16.92z"/>
                                </svg>
                            </button>
                            ${(status === 'interested' || status === 'callback') ? `
                                <button class="whatsapp-btn" onclick="sendWhatsApp('${call.number}', '${call.key}')">
                                    <svg class="whatsapp-icon" viewBox="0 0 308 308">
                                        <path d="M227.904,176.981c-0.6-0.288-23.054-11.345-27.044-12.781c-1.629-0.585-3.374-1.156-5.23-1.156 c-3.032,0-5.579,1.511-7.563,4.479c-2.243,3.334-9.033,11.271-11.131,13.642c-0.274,0.313-0.648,0.687-0.872,0.687 c0.201,0-3.676-1.431-4.728-1.888c-24.087-10.463-42.37-35.624-44.877-39.867c-0.358-0.61-0.373-0.887-0.376-0.887 c0.088-0.323,0.898-1.135,1.316-1.554c1.223-1.21,2.548-2.805,3.83-4.348c0.607-0.731,1.215-1.463,1.812-2.153 c1.86-2.164,2.688-3.844,3.648-5.79l0.503-1.011c2.344-4.657,0.342-8.587-0.305-9.856c-0.531-1.062-10.012-23.944-11.02-26.348 c-2.424-5.801-5.627-8.502-10.078-8.502c-0.413,0,0,0-1.732,0.073c-2.109,0.089-13.594,1.601-18.672,4.802 c-5.385,3.395-14.495,14.217-14.495,33.249c0,17.129,10.87,33.302,15.537,39.453c0.116,0.155,0.329,0.47,0.638,0.922 c17.873,26.102,40.154,45.446,62.741,54.469c21.745,8.686,32.042,9.69,37.896,9.69c0.001,0,0.001,0,0.001,0 c2.46,0,4.429-0.193,6.166-0.364l1.102-0.105c7.512-0.666,24.02-9.22,27.775-19.655c2.958-8.219,3.738-17.199,1.77-20.458 C233.168,179.508,230.845,178.393,227.904,176.981z"/>
                                        <path d="M156.734,0C73.318,0,5.454,67.354,5.454,150.143c0,26.777,7.166,52.988,20.741,75.928L0.212,302.716 c-0.484,1.429-0.124,3.009,0.933,4.085C1.908,307.58,2.943,308,4,308c0.405,0,0.813-0.061,1.211-0.188l79.92-25.396 c21.87,11.685,46.588,17.853,71.604,17.853C240.143,300.27,308,232.923,308,150.143C308,67.354,240.143,0,156.734,0z M156.734,268.994c-23.539,0-46.338-6.797-65.936-19.657c-0.659-0.433-1.424-0.655-2.194-0.655c-0.407,0-0.815,0.062-1.212,0.188 l-40.035,12.726l12.924-38.129c0.418-1.234,0.209-2.595-0.561-3.647c-14.924-20.392-22.813-44.485-22.813-69.677 c0-65.543,53.754-118.867,119.826-118.867c66.064,0,119.812,53.324,119.812,118.867 C276.546,215.678,222.799,268.994,156.734,268.994z"/>
                                    </svg>
                                </button>
                                <div class="tick-status" id="status-${call.key}">
                                    ${call.whatsappStatus ? `
                                        <svg class="tick-icon ${call.whatsappStatus === 'read' ? 'read' : ''}" viewBox="0 0 16 15">
                                            <path d="M15.01 3.316l-.478-.372a.365.365 0 0 0-.51.063L8.666 9.879a.32.32 0 0 1-.484.033l-.358-.325a.319.319 0 0 0-.484.032l-.378.483a.418.418 0 0 0 .036.541l1.32 1.266c.143.14.361.125.484-.033l6.272-8.048a.366.366 0 0 0-.064-.512zm-4.1 0l-.478-.372a.365.365 0 0 0-.51.063L4.566 9.879a.32.32 0 0 1-.484.033L1.891 7.769a.366.366 0 0 0-.515.006l-.423.433a.364.364 0 0 0 .006.514l3.258 3.185c.143.14.361.125.484-.033l6.272-8.048a.365.366 0 0 0-.063-.51z"/>
                                        </svg>
                                    ` : ''}
                                </div>
                            ` : ''}
                        </div>
                    </div>
                `).join('');

                callList.innerHTML = callListHtml;

                // Add new styles dynamically if they don't exist
                if (!document.getElementById('whatsapp-styles')) {
                    const styles = document.createElement('style');
                    styles.id = 'whatsapp-styles';
                    styles.textContent = `
                        .button-group {
                            display: flex;
                            gap: 15px;
                            align-items: center;
                        }
                        .icon-only {
                            padding: 0 !important;
                            width: 45px;
                            height: 45px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            background: var(--primary-color);
                            border: none;
                            border-radius: 50%;
                            cursor: pointer;
                        }
                        .call-icon {
                            width: 24px;
                            height: 24px;
                            stroke: white;
                        }
                        .whatsapp-btn {
                            background: #25D366;
                            color: white;
                            border: none;
                            border-radius: 50%;
                            width: 45px;
                            height: 45px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            cursor: pointer;
                            transition: all 0.2s ease;
                            padding: 12px;
                        }
                        .whatsapp-icon {
                            width: 100%;
                            height: 100%;
                            fill: white;
                        }
                        .tick-status {
                            display: flex;
                            align-items: center;
                            background: white;
                            border-radius: 50%;
                            padding: 2px;
                        }
                        .tick-icon {
                            width: 24px;
                            height: 24px;
                            fill: #8696a0;
                        }
                        .tick-icon.read {
                            fill: #000000;
                        }
                       
                        .call-item {
                            padding: 15px;
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                        }
                    `;
                    document.head.appendChild(styles);
                }

            } catch (error) {
                console.error('Error showing activity:', error);
                callList.innerHTML = '<div class="call-item">Error loading calls.</div>';
            }
        }

        // Function to handle WhatsApp clicks with dynamic greeting and pre-typed message
        async function sendWhatsApp(number, key) {
            try {
                const telecallerEmail = localStorage.getItem('telecallerEmail');
                const telecallerName = telecallerEmail.split('@')[0];
                const db = firebase.database();
                
                // Update WhatsApp status in Firebase
                await db.ref(`${telecallerName}/${key}`).update({
                    whatsappStatus: 'sent'
                });

                // Update UI to show double tick
                const statusElement = document.getElementById(`status-${key}`);
                if (statusElement) {
                    statusElement.innerHTML = `
                        <svg class="tick-icon" viewBox="0 0 16 15">
                            <path d="M15.01 3.316l-.478-.372a.365.365 0 0 0-.51.063L8.666 9.879a.32.32 0 0 1-.484.033l-.358-.325a.319.319 0 0 0-.484.032l-.378.483a.418.418 0 0 0 .036.541l1.32 1.266c.143.14.361.125.484-.033l6.272-8.048a.366.366 0 0 0-.064-.512zm-4.1 0l-.478-.372a.365.365 0 0 0-.51.063L4.566 9.879a.32.32 0 0 1-.484.033L1.891 7.769a.366.366 0 0 0-.515.006l-.423.433a.364.364 0 0 0 .006.514l3.258 3.185c.143.14.361.125.484-.033l6.272-8.048a.365.366 0 0 0-.063-.51z"/>
                        </svg>
                    `;
                }

                // Get current hour for time-based greeting
                const currentHour = new Date().getHours();
                let timeGreeting = "Hello";
                
                if (currentHour >= 5 && currentHour < 12) {
                    timeGreeting = "Good morning";
                } else if (currentHour >= 12 && currentHour < 17) {
                    timeGreeting = "Good afternoon";
                } else {
                    timeGreeting = "Good evening";
                }

                // Properly format number for WhatsApp
                let cleanNumber = number.replace(/\D/g, '');  // Remove all non-digits
                
                // Ensure proper phone number format: Check if exactly 10 digits, or if not 10 digits but starts with 91
                let formattedNumber;
                if (cleanNumber.length === 10) {
                    // Standard 10-digit Indian number - add 91 prefix
                    formattedNumber = '91' + cleanNumber;
                } else if (cleanNumber.length === 12 && cleanNumber.startsWith('91')) {
                    // Already has 91 prefix - use as is
                    formattedNumber = cleanNumber;
                } else if (cleanNumber.length > 10) {
                    // Handle other cases - extract last 10 digits and add 91
                    const last10Digits = cleanNumber.slice(-10);
                    formattedNumber = '91' + last10Digits;
                } else {
                    // Any other case - use as is
                    formattedNumber = cleanNumber;
                }
                
                // Prepare message - using explicit line breaks for WhatsApp
                const message = `${timeGreeting} Sir/Mam,

Thank you for your interest in our premium JB INFRA Open Plots project!

You can view our project photos and videos here:
https://drive.google.com/drive/folders/12aGl2wjwqGFwaA9qDCu-suHGzgWQi6CI

These images/videos showcase:
• Beautifully developed infrastructure
• Wide internal roads with streetlights
• Lush green surroundings
• Nearby amenities and landmarks
• Actual plot layout and dimensions

Would you like to schedule a site visit this weekend? I can arrange transportation if needed. (*FREE SITE VISIT*)

Thank you,
JB INFRA
987654321`;
                
                // Use correct URL encoding for WhatsApp
                const encodedMessage = encodeURIComponent(message);
                
                // Open WhatsApp with properly constructed URL
                window.location.href = `https://api.whatsapp.com/send?phone=${formattedNumber}&text=${encodedMessage}`;
                
                // Simulate message read after 2 seconds
                setTimeout(async () => {
                    await db.ref(`${telecallerName}/${key}`).update({
                        whatsappStatus: 'read'
                    });
                    if (statusElement) {
                        statusElement.innerHTML = `
                            <svg class="tick-icon read" viewBox="0 0 16 15">
                                <path d="M15.01 3.316l-.478-.372a.365.365 0 0 0-.51.063L8.666 9.879a.32.32 0 0 1-.484.033l-.358-.325a.319.319 0 0 0-.484.032l-.378.483a.418.418 0 0 0 .036.541l1.32 1.266c.143.14.361.125.484-.033l6.272-8.048a.366.366 0 0 0-.064-.512zm-4.1 0l-.478-.372a.365.365 0 0 0-.51.063L4.566 9.879a.32.32 0 0 1-.484.033L1.891 7.769a.366.366 0 0 0-.515.006l-.423.433a.364.364 0 0 0 .006.514l3.258 3.185c.143.14.361.125.484-.033l6.272-8.048a.365.366 0 0 0-.063-.51z"/>
                            </svg>
                        `;
                    }
                }, 2000);

            } catch (error) {
                console.error('Error sending WhatsApp message:', error);
            }
        }

        // Add this masking function at the top of your script
        function maskPhoneNumber(number, status, isActivityView) {
            // Only mask if we're in activity view AND status is Interested/Callback
            if (number && number.length === 10 && isActivityView && 
                (status === 'Interested' || status === 'Callback')) {
                return number.slice(0, 2) + 'XX' + number.slice(4);
            }
            return number;
        }

        // Add a listener for number removals
        const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
                if (mutation.removedNodes.length > 0) {
                    // Count remaining numbers in the list
                    const remainingNumbers = document.querySelectorAll('.call-item').length;
                    // Update header count instantly
                    document.getElementById('headerCount').textContent = `${remainingNumbers} Numbers Left`;
                }
            });
        });

        // Start observing the call list for changes
        document.addEventListener('DOMContentLoaded', () => {
            const callList = document.getElementById('callList');
            observer.observe(callList, { childList: true, subtree: true });
        });

        // Add this function to sort calls by recency
        function convertToDateTime(dateTimeStr) {
            if (!dateTimeStr) return new Date(0);
            
            try {
                // Split the date and time parts
                const [datePart, timePart, meridian] = dateTimeStr.trim().split(' ');
                
                // Parse date components
                const [day, month, year] = datePart.split('/').map(num => parseInt(num));
                
                // Parse time components
                let [hours, minutes] = timePart.split(':').map(num => parseInt(num));
                
                // Handle AM/PM properly
                const period = (meridian || '').toUpperCase();
                if (period === 'AM' || period === 'am') {
                    if (hours === 12) hours = 0;
                } else if (period === 'PM' || period === 'pm') {
                    if (hours !== 12) hours += 12;
                }
                
                // Create date object (year is 2000 + YY format)
                return new Date(2000 + year, month - 1, day, hours, minutes);
            } catch (e) {
                console.error('Error parsing date:', dateTimeStr, e);
                return new Date(0);
            }
        }
    </script>
</body>
</html> 